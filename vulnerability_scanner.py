import urllib.parse
from tkinter import *
import requests
import re
import tkinter as tk
from tkinter import messagebox
from tkinter import filedialog
from urllib.parse import urlparse, parse_qs
import threading
import customtkinter as ctk
from PIL import ImageTk,Image
from bs4 import BeautifulSoup


def vulnerability_scanner():
    vulnerability_scanner = ctk.CTkToplevel()
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("dark-blue")
    vulnerability_scanner.geometry("1000x700")
    vulnerability_scanner.title("Vulnerability Scanner Tool")
    background_image = Image.open("dark.png")
    background_image = background_image.resize((vulnerability_scanner.winfo_screenwidth(), vulnerability_scanner.winfo_screenheight()), Image.BICUBIC)
    background_image = ImageTk.PhotoImage(background_image)
    background_label = ctk.CTkLabel(vulnerability_scanner, image=background_image)
    background_label.place(x=0, y=0, relwidth=1, relheight=1)


    def check_payload(url, payload):
        response = requests.get(url)
        input_field = re.search(r'<input[^>]*>', response.text)
        if input_field:
            input_name = re.search(r'name=[\'"]([^\'"]+)', input_field.group(0)).group(1)
            form_data = {input_name: payload}
            response = requests.post(url, data=form_data)
        else:
            parsed_url = urlparse(url)
            params = parse_qs(parsed_url.query)
            params[payload] = ['1']
            updated_query = '&'.join([f'{k}={v[0]}' for k, v in params.items()])
            updated_url = parsed_url._replace(query=updated_query).geturl()
            response = requests.get(updated_url)

        if re.search(r'Error', response.text) or re.search(r'SQL', response.text) or re.search(r'Data', response.text):
            return f"SQL Injection detected for payload: {payload}"
        else:
            return None

    def run_sql_injection_detection():
        # Get target URL and payload source
        target_url = url_entry1.get()
        payload_source = payload_source_var.get()

        # Check if target URL is empty
        if not target_url:
            messagebox.showerror("Error", "No target URL entered.")
            return

        # Check if file option is selected
        if payload_source == 'File':
            # File option selected, implement file handling logic
            file_path = filedialog.askopenfilename(filetypes=[("Text Files", "*.txt")])
            if file_path:
                with open(file_path, 'r') as file:
                    payloads = file.read().splitlines()

                results_text.delete(1.0, tk.END)
                completion_label.configure(text="")

                sql_injection_detected = threading.Event()  # Event to signal SQL injection detection

                def process_payload(payload):
                    result = check_payload(target_url, payload.strip())
                    if result:
                        results_text.insert(tk.END, f"Payload: {payload.strip()}\nResult: {result}\n\n")
                        sql_injection_detected.set()

                def run_thread():
                    for payload in payloads:
                        thread = threading.Thread(target=process_payload, args=(payload,))
                        thread.start()
                        thread.join()

                    if not sql_injection_detected.is_set():
                        results_text.insert(tk.END, "No SQL Injection detected for any payload.")

                    completion_label.configure(text="SQL injection detection completed.")

                thread = threading.Thread(target=run_thread)
                thread.start()

            else:
                messagebox.showerror("Error", "No file selected.")
        else:
            # Manual option selected, implement manual payload handling logic
            manual_payloads = manual_payload_entry.get()
            if manual_payloads:
                payloads = manual_payloads.split(',')

                results_text.delete(1.0, tk.END)
                completion_label.configure(text="")

                sql_injection_detected = threading.Event()  # Event to signal SQL injection detection

                def run_thread():
                    for payload in payloads:
                        result = check_payload(target_url, payload.strip())
                        if result:
                            results_text.insert(tk.END, f"Payload: {payload.strip()}\nResult: {result}\n\n")
                            sql_injection_detected.set()

                    if not sql_injection_detected.is_set():
                        results_text.insert(tk.END, "No SQL Injection detected for any payload.")

                    completion_label.configure(text="SQL injection detection completed.")

                thread = threading.Thread(target=run_thread)
                thread.start()

            else:
                messagebox.showerror("Error", "No manual payloads entered.")


    # URL Entry
    url_label = ctk.CTkLabel(vulnerability_scanner, text="Target URL:")
    url_label.pack()
    url_label.place(relx=0.1, rely=0.02, anchor=tk.CENTER)
    url_entry1 = ctk.CTkEntry(vulnerability_scanner)
    url_entry1.pack()
    url_entry1.place(relx=0.1, rely=0.05, anchor=tk.CENTER)
    url_entry1.configure(width=250)

    # Payload Source Option
    payload_source_label = ctk.CTkLabel(vulnerability_scanner, text="Payload Source:")
    payload_source_label.pack()
    payload_source_label.place(relx=0.1, rely=0.1, anchor=tk.CENTER)
    payload_source_var = ctk.StringVar()
    payload_source_var.set("Manual")

    payload_source_checkbutton = ctk.CTkCheckBox(vulnerability_scanner, text="File", variable=payload_source_var,
                                                 onvalue="File", offvalue="Manual")
    payload_source_checkbutton.pack()
    payload_source_checkbutton.place(relx=0.12, rely=0.14, anchor=tk.CENTER)

    # Manual Payload Entry
    manual_payload_label = ctk.CTkLabel(vulnerability_scanner, text="Manual Payloads:")
    manual_payload_label.pack()
    manual_payload_label.place(relx=0.1, rely=0.18, anchor=tk.CENTER)
    manual_payload_entry = ctk.CTkEntry(vulnerability_scanner)
    manual_payload_entry.pack()
    manual_payload_entry.place(relx=0.1, rely=0.21, anchor=tk.CENTER)
    manual_payload_entry.configure(width=250)

    # Results Text
    results_label = ctk.CTkLabel(vulnerability_scanner, text="Results:")
    results_label.pack()
    results_label.place(relx=0.1, rely=0.25, anchor=tk.CENTER)
    results_text = tk.Text(vulnerability_scanner, width=63, height=20, bg="black", fg="white", font=("Courier", 10))
    results_text.pack(expand=False)
    results_text.place(relx=0.19, rely=0.52, anchor=tk.CENTER)

    # Completion Label
    completion_label = ctk.CTkLabel(vulnerability_scanner, text="")
    completion_label.pack()
    completion_label.place(relx=0.1, rely=0.77, anchor=tk.CENTER)

    # Run Button
    run_button = ctk.CTkButton(vulnerability_scanner, text="Run", command=run_sql_injection_detection)
    run_button.pack()
    run_button.place(relx=0.1, rely=0.82, anchor=tk.CENTER)

    def scan_for_xss():
        # Retrieve the URL from the entry field
        url = url_entry.get()

        # Check if "File" checkbox is selected
        if file_checkbox_var.get():
            # Prompt the user to select a payload file
            file_path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
            if file_path:
                with open(file_path, "r") as file:
                    payloads = file.read().splitlines()
        else:
            # Retrieve payloads from manual entry
            payloads = manual_entry.get("1.0", tk.END).splitlines()

        # Identify input forms
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')

        if forms:
            # Check for XSS with each payload in input forms
            vulnerable_payloads = []

            for payload in payloads:
                for form in forms:
                    inputs = form.find_all('input')
                    form_data = {}

                    # Prepare form data with payload
                    for input_field in inputs:
                        if input_field.get('type') not in ['submit', 'button', 'hidden']:
                            input_field_name = input_field.get('name')
                            form_data[input_field_name] = payload

                    # Submit the form
                    response = requests.post(url, data=form_data)

                    # Analyze the response for XSS indicators
                    if "script" in response.text or "XSS" in response.text:
                        vulnerable_payloads.append(payload)

            # Display vulnerable payloads in the GUI
            if vulnerable_payloads:
                payload_text.delete("1.0", tk.END)
                for payload in vulnerable_payloads:
                    payload_text.insert(tk.END, payload + " - XSS Detected\n")
                status_label.configure(text="Scan completed.")
            else:
                payload_text.delete("1.0", tk.END)
                payload_text.insert(tk.END, "No XSS vulnerabilities found.")
                status_label.configure(text="Scan completed.")

        else:
            # No input forms found, scan URL and parameter
            vulnerable_payloads = []

            for payload in payloads:
                encoded_payload = urllib.parse.quote(payload)
                scanned_url = url + encoded_payload
                response = requests.get(scanned_url)

                # Analyze the response for XSS indicators
                if "script" in response.text or "XSS" in response.text:
                    vulnerable_payloads.append(payload)

            # Display vulnerable payloads in the GUI
            if vulnerable_payloads:
                payload_text.delete("1.0", tk.END)
                for payload in vulnerable_payloads:
                    payload_text.insert(tk.END, payload + " - XSS Detected\n")
                status_label.configure(text="Scan completed.")
            else:
                payload_text.delete("1.0", tk.END)
                payload_text.insert(tk.END, "No XSS vulnerabilities found.")
                status_label.configure(text="Scan completed.")

        # Enable the scan button after scanning is complete
        scan_button.configure(state=tk.NORMAL)

    # Create a label and entry field for the URL
    url_label = ctk.CTkLabel(vulnerability_scanner, text="Enter the URL to scan:")
    url_label.pack()
    url_label.place(relx=0.9, rely=0.02, anchor=CENTER)
    url_label.configure(font=("Courier", 14), fg_color="#0B1320")
    url_entry = ctk.CTkEntry(vulnerability_scanner)
    url_entry.configure(width=250)
    url_entry.pack()
    url_entry.place(relx=0.9, rely=0.05, anchor=CENTER)

    payload_source_label1 = ctk.CTkLabel(vulnerability_scanner, text="Payload Source:")
    payload_source_label1.pack()
    payload_source_label1.place(relx=0.9, rely=0.1, anchor=CENTER)
    payload_source_label1.configure(font=("Courier", 14), fg_color="#0B1320")

    # Create a checkbox for file selection
    file_checkbox_var = ctk.IntVar()
    file_checkbox = ctk.CTkCheckBox(vulnerability_scanner, text="File", variable=file_checkbox_var)
    file_checkbox.pack()
    file_checkbox.place(relx=0.9, rely=0.14, anchor=CENTER)
    file_checkbox.configure(font=("Courier", 14), fg_color="#0B1320")

    # Create a label for manual payload entry
    manual_entry_label = ctk.CTkLabel(vulnerability_scanner, text="Enter manual payloads:")
    manual_entry_label.pack()
    manual_entry_label.place(relx=0.9, rely=0.18, anchor=CENTER)
    manual_entry_label.configure(font=("Courier", 14), fg_color="#0B1320")

    # Create a text widget for manual payload entry
    manual_entry = tk.Text(vulnerability_scanner, height=5, width=50, bg="black", fg="white", highlightbackground="black", highlightthickness=1)
    manual_entry.pack()
    manual_entry.place(relx=0.85, rely=0.27, anchor=CENTER)

    # Create a button to start scanning
    scan_button = ctk.CTkButton(vulnerability_scanner, text="XSS Scan", command=scan_for_xss)
    scan_button.pack()
    scan_button.place(relx=0.9, rely=0.82, anchor=CENTER)

    results_label2 = ctk.CTkLabel(vulnerability_scanner, text="Results:")
    results_label2.pack()
    results_label2.place(relx=0.85, rely=0.45, anchor=CENTER)
    results_label2.configure(font=("Courier", 14), fg_color="#0B1320")

    # Create a text widget to display vulnerable payloads
    payload_text = tk.Text(vulnerability_scanner, height=10, width=50, bg="black", fg="white", highlightbackground="black", highlightthickness=1)
    payload_text.pack()
    payload_text.place(relx=0.85, rely=0.6, anchor=CENTER)

    # Create a label to display the status
    status_label = ctk.CTkLabel(vulnerability_scanner, text="")
    status_label.pack()
    status_label.place(relx=0.9, rely=0.9, anchor=CENTER)
    status_label.configure(font=("Courier", 14), fg_color="#0B1320")

    how_to_use_label = ctk.CTkLabel(vulnerability_scanner, text="How to use sql injection scan (Left Side):\n1. Enter the URL to scan.\n2. Select the payload source.\n3. Enter the payloads or select a file.\n4. Click the 'SQL injection Scan' button.\n\nHow to use XSS Detector scan (Right Side):\n1. Enter the URL to scan.\n2. Select the payload source.\n3. Enter the payloads or select a file.\n4. Click the 'XSS Scan' button.")
    how_to_use_label.pack()
    how_to_use_label.place(relx=0.54, rely=0.5, anchor=CENTER)
    how_to_use_label.configure(font=("Courier", 14), fg_color="#0B1320")

    legal_warning_label = ctk.CTkLabel(vulnerability_scanner, text="Legal Warning:\nUse of this tool without prior mutual consent can be considered as an illegal activity.\n It is the final user's responsibility to obey all applicable local, state and federal laws.\n Authors assume no liability and are not responsible for any misuse or damage caused by this program.")
    legal_warning_label.pack()
    legal_warning_label.place(relx=0.54, rely=0.1, anchor=CENTER)
    legal_warning_label.configure(font=("Courier", 12), fg_color="#0B1320")

    # Create a Back button
    back_button = ctk.CTkButton(vulnerability_scanner, text="Back", command=vulnerability_scanner.destroy)
    back_button.pack()
    back_button.place(relx=0.54, rely=0.82, anchor=CENTER)

    # Start the GUI event loop
    vulnerability_scanner.mainloop()
