import tkinter as tk
import tkinter.scrolledtext as scrolledtext
from tkinter import filedialog
import requests
import json
import customtkinter
from tkinter import *
import sys

from PIL import ImageTk, Image


def new_window():
    window = customtkinter.CTkToplevel()

    customtkinter.set_appearance_mode("dark")

    customtkinter.set_default_color_theme("dark-blue")

    window.geometry("1000x1000")

    window.title("CVE Search")

    background_image = Image.open("dark.png")

    background_image = background_image.resize((window.winfo_screenwidth(), window.winfo_screenheight()), Image.BICUBIC)

    background_image = ImageTk.PhotoImage(background_image)

    background_label = tk.Label(window, image=background_image)

    background_label.place(x=0, y=0, relwidth=1, relheight=1)

    processing_label = customtkinter.CTkLabel(window, text='Not running', padx=5)

    processing_label.pack()

    cve_label = customtkinter.CTkLabel(window, text="CVE ID:")

    cve_label.place(relx=0.43, rely=0.6, anchor=tk.CENTER)
    cve_entry = customtkinter.CTkEntry(window)

    cve_entry.place(relx=0.5, rely=0.6, anchor=tk.CENTER)

    cve_id_label1 = customtkinter.CTkLabel(window, text="")

    cve_id_label1.place(relx=0.4, rely=0.6, anchor=tk.CENTER)

    cvss_score_label = customtkinter.CTkLabel(window, text="")

    cvss_score_label.place(relx=0.4, rely=0.4, anchor=tk.CENTER)

    cvss_vector_label = customtkinter.CTkLabel(window, text="")

    cvss_vector_label.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

    def go_back():
        window.destroy()

    def search_cve():
        cve_ids = cve_entry.get().split(',')
        processing_label.configure(text="Request finished")

        for i, cve_id in enumerate(cve_ids):
            cve_id_label = customtkinter.CTkLabel(master=window, text=f"CVE ID: {cve_id}")
            cve_id_label.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

            response = requests.get(f'https://services.nvd.nist.gov/rest/json/cve/1.0/{cve_id}')

            if response.status_code == 200:
                results = json.loads(response.text)
                cve_data = results['result']['CVE_Items'][0]['cve']
                cve_desc_str = cve_data['description']['description_data'][0]['value']

                if 'baseMetricV3' in results['result']['CVE_Items'][0]['impact']:
                    cvss_score_str = results['result']['CVE_Items'][0]['impact']['baseMetricV3']['cvssV3']['baseScore']
                    cvss_vector_str = results['result']['CVE_Items'][0]['impact']['baseMetricV3']['cvssV3']['vectorString']
                else:
                    cvss_score_str = 'N/A'
                    cvss_vector_str = 'N/A'

                cvss_score_label = customtkinter.CTkLabel(master=window, text=f"CVSS score: {cvss_score_str}")
                cvss_score_label.place(relx=0.5, rely=0.1, anchor=tk.CENTER)

                cvss_vector_label = customtkinter.CTkLabel(master=window, text=f"CVSS vector: {cvss_vector_str}")
                cvss_vector_label.place(relx=0.5, rely=0.2, anchor=tk.CENTER)

                cve_desc_label = customtkinter.CTkLabel(master=window, text="Description:")
                cve_desc_label.place(relx=0.5, rely=0.3, anchor=tk.CENTER)

                cve_desc_text = scrolledtext.ScrolledText(window, wrap=customtkinter.WORD, width=50, height=5, bg="#0B1320", fg="white")
                cve_desc_text.insert(customtkinter.END, cve_desc_str)
                cve_desc_text.place(relx=0.5, rely=0.4, anchor=tk.CENTER)

                save_button.configure(command=lambda cve_id=cve_id, cvss_score_str=cvss_score_str, cvss_vector_str=cvss_vector_str, cve_desc_str=cve_desc_str: save_results(cve_id, cvss_score_str, cvss_vector_str, cve_desc_str))

            else:
                error_label = customtkinter.CTkLabel(master=window, text=f"Error: {response.status_code} - {response.reason}")
                error_label.place(relx=0.5, rely=0.5, anchor=tk.CENTER)

        processing_label.configure(text="Request complete")

    def save_results(cve_id, cvss_score, cvss_vector, cve_desc):
        file_path = filedialog.asksaveasfilename(defaultextension=".txt",
                                                 filetypes=[("Text Files", "*.txt"), ("All Files", "*.*")])
        if file_path:
            with open(file_path, 'w') as f:
                f.write(f"CVE ID: {cve_id}\n")
                f.write(f"CVSS score: {cvss_score}\n")
                f.write(f"CVSS vector: {cvss_vector}\n\n")
                f.write(cve_desc)

    button = customtkinter.CTkButton(master=window, text='Start', command=search_cve)
    button.place(relx=0.65, rely=0.6, anchor=CENTER)

    save_button = customtkinter.CTkButton(master=window, text='Save Results', command=lambda: save_results("", "", "", ""))
    save_button.place(relx=0.35, rely=0.6, anchor=tk.CENTER)

    back_button = customtkinter.CTkButton(master=window, text='Back', command=go_back)
    back_button.place(relx=0.5, rely=0.7, anchor=tk.CENTER)

    how_to_use_label = customtkinter.CTkLabel(master=window, text="How to use:\n Enter CVE IDs to search for vulnerability information\n Example: CVE-2019-0708 \n Save the results to a text file by clicking the 'Save Results' button")
    how_to_use_label.place(relx=0.5, rely=0.8, anchor=tk.CENTER)
    how_to_use_label.configure(font=("Courier", 16), fg_color="#0B1320")
    window.mainloop()
